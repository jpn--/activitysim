10K sample csv
Separate coefficients and write out
Choosers table
Expression values by chooser row x alternative


The basic workflow:
Run a 10k household sample up through a model such as tour_mode_choice to create a synthetic version of a household travel survey in activitysim format up to that point.  In reality the user uses their actual household survey and not a synthetic one, but this is a detail for subsequent work on this task.
The output pipeline then becomes the input to running activitysim in estimation mode
We then run just tour_mode_choice again, but this time with estimation mode set to true to write out all the required data for re-estimating the model

We're calling this the estimation data bundle
Which is a subset of the trace data, but for every household :
    chooser table
    expression values table
    raw_utilities table (to determine if alternatives are available)
    Plus model specification inputs such as the yaml, spec, and coefficients file


We need to better separate coefficients from data so the coefficients can be re-estimated in the estimation tool
and then easily passed back to asim for model simulation.
I think this means every logit model needs an explicit coefficients.csv input file now.

If destination sampling is done, then the observed alternative may not be in the estimation data bundle.
Therefore, we'll just run it without sampling for now so we get all the alternatives.
It should be ok since the sample size is not very big.

Getting started:
We will prototype tour mode choice
We will use CSV formats
@JeffDoyle create the 10k HH asim format HH survey through tour_mode_choice
@JeffDoyle clean-up coefficients separation and write out the estimation data bundle


Here are my comments on the estimation data bundle (EDB):


1)	Add the (observed) choice, which in this case is the mode.  This is needed for estimation since the estimation software needs to know the observed choices so it can optimize a set of coefficients across all the choosers that result in those choices being the most likely.  This is probably a separate file like tour_mode_choice.eatout.simple_simulate.eval_nl.choices.csv. Will add, but perhaps not segment by purpose?

4)	tour_mode_choice_expression_values.csv – I think this file should be formatted as tour_id, expression, value instead of using the expression as the column name.  I think the expressions as column names will cause problems since they have a lot of special characters.  I agree about them being problematic as solumn names. As for the layout, I agree tis is better if the target is a human reader, but is it for humans, or the input to elm, in which cse, what is the desired format? I wodl like to better understand how the whole process works so my intuition willb e better about what to provide…
5)	tour_mode_choice_model_constants.yaml – I don’t think we need this since we have tour_mode_choice_model_settings.yaml.  I do like including tour_mode_choice_model_settings.yaml in the EDB. Yes, this is only needed if they are using cascading settigns files and content is inherited from elsewhere.
6)	tour_mode_choice_nest_spec.yaml – I think we don’t need this file either. Yes, this is only needed if they are using cascading settigns files and content is inherited from elsewhere.




Can you make these changes and then send the EDB to Newman for review and cc me?

############
Sample Data

# final_xxx files become the fake observed (survey) dataset

# use a different base seed so fake observed trips have different behavior from model
rng_base_seed: 1

# initialize.py has switch to write sampled raw data
write_raw_tables: True

python simulation.py -c configs_survey_2000 -c ../example/configs -o output_survey_2000

# copy canonical data files to data folder (example_estimation/output_survey_100/raw_tables -> example_estimation/data)


############


From: Mark Bradley
Sent: Thursday, March 26, 2020 1:45 PM
To: Jeffrey Doyle <Jeff.Doyle@rsginc.com>; Ben Stabler <Ben.Stabler@rsginc.com>
Subject: RE: Estimation data bundle take 2

OK, here are three adapted files that I think would work for this model,
and be pretty easy to adapt to use with any estimation software:

The adapted coefficients file has the following changes:
Changed from five columns of coefficients to one column.
Renamed coefficients to start with c_car0_...., c_car1_....,
(I think the car0, etc. could also come at the end of the string- just needs to be done consistently)
Added a constrained coefficient column with T, F (could be TRUE, FALSE).
By default, it should be TRUE for any coefficient  with value 0, and FALSE for all others.

The adapted SPEC file has the following changes:
Added a first column with expression labels.  I used Util_Exp_1 to Util_Exp_29 in this case.
Change the names of the coefficients in the alternatives columns to have the same c_car0.., c_car1…, etc names
that are in the adapted coefficients file.

Added some availability expressions, Avail_Exp_1 to Avail_Exp_5.
They’re not really necessary for this model, but just as an example of how to do it for cases where they are used.
In general, an alternative is true if the expression value is TRUE for ALL availability expressions
that are TRUE in that column. Here, each of the 5 alternatives has one expressions that applies and
all five are always true, so everything is available.  But, for example, for Aval_Exp_5, you could put
the expression (nadults>=4), so the 4+ car alternative would only be available for households with 4+ adults.

The combined values file was created as follows
(I combined these into one file, because it will save the user a step –
some estimation software won’t accept multiple data files):
Sorted the choices file by household id and started with that.
Took the expression_values.csv file and took the 29 expression values for each of the households and transposed them
into the Util_Exp_1 to Util_Exp_29 columns. (I only included the first 10 HH, so I wouldn’t have to do this 100 times.)
Added the columns Avail_Exp_1 to Avail_Exp_5 and set them to true.
Took the choosers.csv file and sorted by household ID and appended those values to the end of each record.
(These variables aren’t necessary to estimate the base model, but may be useful to have on the file if
the user wants to add new variables into the model specification.